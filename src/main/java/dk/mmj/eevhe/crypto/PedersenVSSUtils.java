package dk.mmj.eevhe.crypto;

import java.math.BigInteger;
import java.security.SecureRandom;

/**
 * Utility class for functionality regarding the Pedersen VSS protocol
 */
public class PedersenVSSUtils {
    private static final SecureRandom random = new SecureRandom();

    /**
     * Returns a random element in the subgroup Z_p^* generated by generator g.
     *
     * @param generator A group generator
     * @param p         Prime modulus
     * @return Random element in Z_p^*
     */
    public static BigInteger generateElementInSubgroup(BigInteger generator, BigInteger p) {
        return generator.modPow(new BigInteger(p.bitLength(), random), p);
    }

    /**
     * Computes the coefficient commitments, which are denoted C_ik in the Gennaro paper.
     *
     * @param g           Generator g used to generate subgroup Z_p^*
     * @param e           Chosen random element from subgroup Z_p^*
     * @param p           Prime modulus
     * @param polynomial1 The polynomial f()
     * @param polynomial2 The polynomial f'()
     * @return Coefficient commitments
     */
    public static BigInteger[] computeCoefficientCommitments(BigInteger g, BigInteger e,
                                                             BigInteger p, BigInteger[] polynomial1,
                                                             BigInteger[] polynomial2) {
        BigInteger[] coefficientCommitments = new BigInteger[polynomial1.length];

        for (int i = 0; i < polynomial1.length; i++) {
            BigInteger gPow = g.modPow(polynomial1[i], p);
            BigInteger ePow = e.modPow(polynomial2[i], p);

            coefficientCommitments[i] = gPow.multiply(ePow).mod(p);
        }

        return coefficientCommitments;
    }


    /**
     * Calls the Feldman-VSS implementation to combine coefficient commitments.
     *
     * @param coefficientCommitments The coefficient commitments to combine
     * @param j                      The DA's ID &#62; 0
     * @param p                      Prime modulus p
     * @return Combined coefficient commitments g^(f_i(j)) * e^(f'_i(j))
     */
    public static BigInteger combineCoefficientCommitments(BigInteger[] coefficientCommitments, BigInteger j, BigInteger p) {
        return FeldmanVSSUtils.combineCoefficientCommitments(coefficientCommitments, j, p);
    }

    /**
     * @param g                      Generator g
     * @param e                      Randomly chosen element in subgroup Z_p^*
     * @param u1                     u_j, which is equal to f_i(j)
     * @param u2                     u'_j, which is equal to f'_i(j)
     * @param coefficientCommitments The coefficient commitments to combine
     * @param j                      The DA's ID &#62; 0
     * @param p                      Prime modulus p
     * @param q                      Prime modulus q = (p-1) / 2
     * @return Whether g^u_j * e^u'_j equals C_j or not
     */
    public static boolean verifyCommitmentRespected(BigInteger g, BigInteger e,
                                                    BigInteger u1, BigInteger u2,
                                                    BigInteger[] coefficientCommitments,
                                                    BigInteger j, BigInteger p, BigInteger q) {
        BigInteger gU = g.modPow(u1, p);
        BigInteger eU = e.modPow(u2, p);
        BigInteger leftSide = gU.multiply(eU).mod(p);
        BigInteger combinedCoefficientCommitments = combineCoefficientCommitments(coefficientCommitments, j, p);

        return leftSide.equals(combinedCoefficientCommitments);
    }
}
